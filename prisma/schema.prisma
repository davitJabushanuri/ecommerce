// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
  reviews       Review[]
  orders        Order[]
  favorites     Favorite[]
}

model Product {
  id              String    @id @default(cuid())
  name            String    @unique
  description     String?
  price           Int       @default(0)
  image           String?
  brand           String?
  category        String?
  rating          Int       @default(0)
  numReviews      Int       @default(0)
  isBestSeller    Boolean   @default(false)
  isNew           Boolean   @default(false)
  isOnSale        Boolean   @default(false)
  isTrending      Boolean   @default(false)
  shipping        Int       @default(0)

  reviews         Review[]
  stock           Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  orders          Order[]
  favorites       Favorite[]

}

model Review {
  id              String    @id @default(cuid())
  productId       String
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  product         Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  rating          Int       @default(0)
  comment         String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Order {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  products        Product[]
  name            String
  description     String?
  image           String
  price           Int       @default(0)
  quantity        Int       @default(0)

  shippingAddress String
  shippingCity    String
  shippingState   String
  shippingZip     String

  paymentMethod   String
  paymentStatus   String
  paymentAmount   Int       @default(0)
  tax             Int       @default(0)
  shipping        Int       @default(0)
  total           Int       @default(0)

  isPaid          Boolean   @default(false)
  paidAt          DateTime?
  isShipped       Boolean   @default(false)
  shippedAt       DateTime?
  isDelivered     Boolean   @default(false)
  deliveredAt     DateTime?

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Favorite {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId       String
  product         Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}
  


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}