// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role       @default(USER)
  accounts      Account[]
  sessions      Session[]
  reviews       Review[]
  orders        Order[]
  favorites     Favorite[]
  helpful       Helpful[]
}

model Product {
  id           String  @id @default(cuid())
  name         String
  description  String
  price        Int
  image        String
  brand        String
  category     String
  condition    String
  stock        Int
  shipping     Int
  rating       Int     @default(0)
  numReviews   Int     @default(0)
  isBestSeller Boolean @default(false)
  isNew        Boolean @default(false)
  isOnSale     Boolean @default(false)
  isTrending   Boolean @default(false)

  reviews   Review[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  orders    Order[]
  favorites Favorite[]
}

model Review {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userName    String
  userEmail   String
  userImage   String
  rating      Int
  image       String?
  title       String
  description String
  helpful     Helpful[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Report      Report[]
}

model Helpful {
  id        String  @id @default(cuid())
  reviewId  String
  review    Review  @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  userEmail String
  user      User    @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Report {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  message     String?
  description String?
  reviewId    String
  review      Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
}

model Order {
  id          String    @id @default(cuid())
  userEmail   String
  user        User      @relation(fields: [userEmail], references: [id], onDelete: Cascade)
  products    Product[]
  name        String
  description String?
  image       String
  price       Int       @default(0)
  quantity    Int       @default(0)

  shippingAddress String
  shippingCity    String
  shippingState   String
  shippingZip     String

  paymentMethod String
  paymentStatus String
  paymentAmount Int    @default(0)
  tax           Int    @default(0)
  shipping      Int    @default(0)
  total         Int    @default(0)

  isPaid      Boolean   @default(false)
  paidAt      DateTime?
  isShipped   Boolean   @default(false)
  shippedAt   DateTime?
  isDelivered Boolean   @default(false)
  deliveredAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
